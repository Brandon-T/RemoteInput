//
// Created by Brandon on 2021-10-17.
//

#include "RIEventQueue.hxx"
#include "WindowEvent.hxx"
#include <utility>

jobject RIEvent::Wrap(JNIEnv* env, jobject original) noexcept
{
    jclass cls = env->FindClass("eos/EventInput/AWTEvent");
    if (cls)
    {
        jmethodID methodID = env->GetMethodID(cls, "<init>", "(Ljava/awt/AWTEvent;)V");
        jobject ref = env->NewObject(cls, methodID, original);
        env->DeleteLocalRef(cls);

        env->DeleteLocalRef(std::exchange(ref, env->NewGlobalRef(ref)));
        return ref;
    }
    return nullptr;
}

RIEvent::RIEvent(JNIEnv* env, AWTEvent* original) noexcept : AWTEvent(RIEvent::Wrap(env, original->get())), env(env)
{
}

RIEvent::RIEvent(JNIEnv* env, jobject original) noexcept : AWTEvent(RIEvent::Wrap(env, original)), env(env)
{
}

RIEvent::RIEvent(RIEvent&& other) noexcept
{
    this->env = other.env;
    this->self = other.self;
    other.self = nullptr;
}

RIEvent::~RIEvent() noexcept
{
    if (self)
    {
        env->DeleteGlobalRef(self);
        self = nullptr;
        env = nullptr;
    }
}

RIEvent& RIEvent::operator = (RIEvent&& other) noexcept
{
    if (self)
    {
        env->DeleteGlobalRef(self);
    }

    this->env = other.env;
    this->self = other.self;
    other.self = nullptr;
    return *this;
}

void RIEventQueue::DefineClass()
{
    // EventQueue
    std::vector<std::uint8_t> bytes = {
        0xCA, 0xFE, 0xBA, 0xBE, 0x0, 0x0, 0x0, 0x32, 0x0, 0x16, 0x1, 0x0, 0x19, 0x65, 0x6F,
        0x73, 0x2F, 0x45, 0x76, 0x65, 0x6E, 0x74, 0x49, 0x6E, 0x70, 0x75, 0x74, 0x2F, 0x45,
        0x76, 0x65, 0x6E, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x7, 0x0, 0x1, 0x1, 0x0, 0x13,
        0x6A, 0x61, 0x76, 0x61, 0x2F, 0x61, 0x77, 0x74, 0x2F, 0x45, 0x76, 0x65, 0x6E, 0x74,
        0x51, 0x75, 0x65, 0x75, 0x65, 0x7, 0x0, 0x3, 0x1, 0x0, 0xF, 0x45, 0x76, 0x65, 0x6E,
        0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2E, 0x6A, 0x61, 0x76, 0x61, 0x1, 0x0, 0xB, 0x6E,
        0x61, 0x74, 0x69, 0x76, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x1, 0x0, 0x1, 0x4A, 0x1,
        0x0, 0x6, 0x3C, 0x69, 0x6E, 0x69, 0x74, 0x3E, 0x1, 0x0, 0x3, 0x28, 0x29, 0x56, 0xC, 0x0,
        0x8, 0x0, 0x9, 0xA, 0x0, 0x4, 0x0, 0xA, 0xC, 0x0, 0x6, 0x0, 0x7, 0x9, 0x0, 0x2, 0x0, 0xC,
        0x1, 0x0, 0x4, 0x74, 0x68, 0x69, 0x73, 0x1, 0x0, 0x1B, 0x4C, 0x65, 0x6F, 0x73, 0x2F, 0x45,
        0x76, 0x65, 0x6E, 0x74, 0x49, 0x6E, 0x70, 0x75, 0x74, 0x2F, 0x45, 0x76, 0x65, 0x6E, 0x74,
        0x51, 0x75, 0x65, 0x75, 0x65, 0x3B, 0x1, 0x0, 0xD, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63,
        0x68, 0x45, 0x76, 0x65, 0x6E, 0x74, 0x1, 0x0, 0x16, 0x28, 0x4C, 0x6A, 0x61, 0x76, 0x61, 0x2F,
        0x61, 0x77, 0x74, 0x2F, 0x41, 0x57, 0x54, 0x45, 0x76, 0x65, 0x6E, 0x74, 0x3B, 0x29, 0x56,
        0x1, 0x0, 0x4, 0x43, 0x6F, 0x64, 0x65, 0x1, 0x0, 0x12, 0x4C, 0x6F, 0x63, 0x61, 0x6C, 0x56,
        0x61, 0x72, 0x69, 0x61, 0x62, 0x6C, 0x65, 0x54, 0x61, 0x62, 0x6C, 0x65, 0x1, 0x0, 0xF, 0x4C,
        0x69, 0x6E, 0x65, 0x4E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6C, 0x65, 0x1, 0x0,
        0xA, 0x53, 0x6F, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6C, 0x65, 0x0, 0x21, 0x0, 0x2, 0x0,
        0x4, 0x0, 0x0, 0x0, 0x1, 0x0, 0x2, 0x0, 0x6, 0x0, 0x7, 0x0, 0x0, 0x0, 0x2, 0x0, 0x1, 0x0, 0x8,
        0x0, 0x9, 0x0, 0x1, 0x0, 0x12, 0x0, 0x0, 0x0, 0x38, 0x0, 0x3, 0x0, 0x1, 0x0, 0x0, 0x0, 0xA,
        0x2A, 0xB7, 0x0, 0xB, 0x2A, 0x9, 0xB5, 0x0, 0xD, 0xB1, 0x0, 0x0, 0x0, 0x2, 0x0, 0x13, 0x0, 0x0,
        0x0, 0xC, 0x0, 0x1, 0x0, 0x0, 0x0, 0xA, 0x0, 0xE, 0x0, 0xF, 0x0, 0x0, 0x0, 0x14, 0x0, 0x0, 0x0,
        0xA, 0x0, 0x2, 0x0, 0x0, 0x0, 0x3, 0x0, 0x4, 0x0, 0x4, 0x1, 0x4, 0x0, 0x10, 0x0, 0x11, 0x0,
        0x0, 0x0, 0x1, 0x0, 0x15, 0x0, 0x0, 0x0, 0x2, 0x0, 0x5
    };

    //ClassLoader systemClassLoader = sun.awt.AppContext.getAppContext().getContextClassLoader();
    this->cls = env->DefineClass("eos/EventInput/EventQueue",
                                 nullptr,
                                 reinterpret_cast<const jbyte *>(&bytes[0]),
                                 static_cast<jsize>(bytes.size()));
    env->DeleteLocalRef(std::exchange(this->cls, static_cast<jclass>(env->NewGlobalRef(this->cls))));

    if (this->cls)
    {
        JNINativeMethod method = {
            "dispatchEvent",
            "(Ljava/awt/AWTEvent;)V",
            reinterpret_cast<void *>(&RIEventQueue::DispatchEvent)
        };
        env->RegisterNatives(cls, &method, 1);

        jmethodID methodID = env->GetMethodID(this->cls, "<init>", "()V");
        this->queue = env->NewObject(this->cls, methodID);
        env->DeleteLocalRef(std::exchange(this->queue, env->NewGlobalRef(this->queue)));

        if (this->queue)
        {
            jfieldID fieldID = env->GetFieldID(this->cls, "nativeQueue", "J");
            env->SetLongField(this->queue, fieldID, reinterpret_cast<std::intptr_t>(this));
        }
        else
        {
            if (env->ExceptionCheck())
            {
                env->ExceptionDescribe();
                env->ExceptionClear();
            }
        }
    }
    else
    {
        if (env->ExceptionCheck())
        {
            env->ExceptionDescribe();
            env->ExceptionClear();
        }
    }

    // AWTEvent
    bytes = {
        0xCA, 0xFE, 0xBA, 0xBE, 0x0, 0x0, 0x0, 0x32, 0x0, 0x1E, 0x1, 0x0, 0x17, 0x65, 0x6F, 0x73, 0x2F,
        0x45, 0x76, 0x65, 0x6E, 0x74, 0x49, 0x6E, 0x70, 0x75, 0x74, 0x2F, 0x41, 0x57, 0x54, 0x45, 0x76,
        0x65, 0x6E, 0x74, 0x7, 0x0, 0x1, 0x1, 0x0, 0x11, 0x6A, 0x61, 0x76, 0x61, 0x2F, 0x61, 0x77, 0x74,
        0x2F, 0x41, 0x57, 0x54, 0x45, 0x76, 0x65, 0x6E, 0x74, 0x7, 0x0, 0x3, 0x1, 0x0, 0xD, 0x41, 0x57,
        0x54, 0x45, 0x76, 0x65, 0x6E, 0x74, 0x2E, 0x6A, 0x61, 0x76, 0x61, 0x1, 0x0, 0x8, 0x6F, 0x72, 0x69,
        0x67, 0x69, 0x6E, 0x61, 0x6C, 0x1, 0x0, 0x13, 0x4C, 0x6A, 0x61, 0x76, 0x61, 0x2F, 0x61, 0x77, 0x74,
        0x2F, 0x41, 0x57, 0x54, 0x45, 0x76, 0x65, 0x6E, 0x74, 0x3B, 0x1, 0x0, 0x6, 0x3C, 0x69, 0x6E, 0x69,
        0x74, 0x3E, 0x1, 0x0, 0x16, 0x28, 0x4C, 0x6A, 0x61, 0x76, 0x61, 0x2F, 0x61, 0x77, 0x74, 0x2F, 0x41,
        0x57, 0x54, 0x45, 0x76, 0x65, 0x6E, 0x74, 0x3B, 0x29, 0x56, 0x1, 0x0, 0x9, 0x67, 0x65, 0x74, 0x53,
        0x6F, 0x75, 0x72, 0x63, 0x65, 0x1, 0x0, 0x14, 0x28, 0x29, 0x4C, 0x6A, 0x61, 0x76, 0x61, 0x2F, 0x6C,
        0x61, 0x6E, 0x67, 0x2F, 0x4F, 0x62, 0x6A, 0x65, 0x63, 0x74, 0x3B, 0xC, 0x0, 0xA, 0x0, 0xB, 0xA, 0x0,
        0x4, 0x0, 0xC, 0x1, 0x0, 0x5, 0x67, 0x65, 0x74, 0x49, 0x44, 0x1, 0x0, 0x3, 0x28, 0x29, 0x49, 0xC, 0x0,
        0xE, 0x0, 0xF, 0xA, 0x0, 0x4, 0x0, 0x10, 0x1, 0x0, 0x16, 0x28, 0x4C, 0x6A, 0x61, 0x76, 0x61, 0x2F, 0x6C,
        0x61, 0x6E, 0x67, 0x2F, 0x4F, 0x62, 0x6A, 0x65, 0x63, 0x74, 0x3B, 0x49, 0x29, 0x56, 0xC, 0x0, 0x8, 0x0,
        0x12, 0xA, 0x0, 0x4, 0x0, 0x13, 0xC, 0x0, 0x6, 0x0, 0x7, 0x9, 0x0, 0x2, 0x0, 0x15, 0x1, 0x0, 0x4, 0x74,
        0x68, 0x69, 0x73, 0x1, 0x0, 0x19, 0x4C, 0x65, 0x6F, 0x73, 0x2F, 0x45, 0x76, 0x65, 0x6E, 0x74, 0x49, 0x6E,
        0x70, 0x75, 0x74, 0x2F, 0x41, 0x57, 0x54, 0x45, 0x76, 0x65, 0x6E, 0x74, 0x3B, 0x1, 0x0, 0x1, 0x65, 0x1,
        0x0, 0x4, 0x43, 0x6F, 0x64, 0x65, 0x1, 0x0, 0x12, 0x4C, 0x6F, 0x63, 0x61, 0x6C, 0x56, 0x61, 0x72, 0x69,
        0x61, 0x62, 0x6C, 0x65, 0x54, 0x61, 0x62, 0x6C, 0x65, 0x1, 0x0, 0xF, 0x4C, 0x69, 0x6E, 0x65, 0x4E, 0x75,
        0x6D, 0x62, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6C, 0x65, 0x1, 0x0, 0xA, 0x53, 0x6F, 0x75, 0x72, 0x63, 0x65,
        0x46, 0x69, 0x6C, 0x65, 0x0, 0x21, 0x0, 0x2, 0x0, 0x4, 0x0, 0x0, 0x0, 0x1, 0x0, 0x2, 0x0, 0x6, 0x0, 0x7,
        0x0, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x8, 0x0, 0x9, 0x0, 0x1, 0x0, 0x1A, 0x0, 0x0, 0x0, 0x4E, 0x0, 0x3, 0x0,
        0x2, 0x0, 0x0, 0x0, 0x12, 0x2A, 0x2B, 0xB6, 0x0, 0xD, 0x2B, 0xB6, 0x0, 0x11, 0xB7, 0x0, 0x14, 0x2A, 0x2B,
        0xB5, 0x0, 0x16, 0xB1, 0x0, 0x0, 0x0, 0x2, 0x0, 0x1B, 0x0, 0x0, 0x0, 0x16, 0x0, 0x2, 0x0, 0x0, 0x0, 0x12,
        0x0, 0x17, 0x0, 0x18, 0x0, 0x0, 0x0, 0x0, 0x0, 0x12, 0x0, 0x19, 0x0, 0x7, 0x0, 0x1, 0x0, 0x1C, 0x0, 0x0,
        0x0, 0xE, 0x0, 0x3, 0x0, 0x0, 0x0, 0x5, 0x0, 0xC, 0x0, 0x6, 0x0, 0x11, 0x0, 0x7, 0x0, 0x1, 0x0, 0x1D, 0x0,
        0x0, 0x0, 0x2, 0x0, 0x5
    };

    jclass cls = env->DefineClass("eos/EventInput/AWTEvent",
                                  nullptr,
                                  reinterpret_cast<const jbyte *>(&bytes[0]),
                                  static_cast<jsize>(bytes.size()));
    env->DeleteLocalRef(cls);
}

void RIEventQueue::DispatchEvent(JNIEnv* env, jobject thiz, jobject event)
{
    jclass cls = env->GetObjectClass(thiz);
    if (cls)
    {
        // super.dispatchEvent
        auto dispatch_event = [](JNIEnv* env, jclass cls, jobject thiz, jobject event) {
            jclass super_class = env->GetSuperclass(cls);

            // super.dispatchEvent
            if (super_class)
            {
                jmethodID methodID = env->GetMethodID(super_class, "dispatchEvent", "(Ljava/awt/AWTEvent;)V");
                env->CallNonvirtualVoidMethod(thiz, super_class, methodID, event);
            }
        };

        // If the class is an instance of our event type, pass it on
        jclass event_class = env->FindClass("eos/EventInput/AWTEvent");
        if (event_class)
        {
            if (env->IsInstanceOf(event, event_class))
            {
                jfieldID fieldID = env->GetFieldID(event_class, "original", "Ljava/awt/AWTEvent;");
                jobject original = env->GetObjectField(event, fieldID);
                if (original)
                {
                    // super.dispatchEvent(original)
                    dispatch_event(env, cls, thiz, original);
                    env->DeleteLocalRef(cls);
                }
                env->DeleteLocalRef(event_class);
                return;
            }
            env->DeleteLocalRef(event_class);
        }

        jfieldID fieldID = env->GetFieldID(cls, "nativeQueue", "J");
        RIEventQueue* this_ = reinterpret_cast<RIEventQueue*>(env->GetLongField(thiz, fieldID));

        if (this_ && (this_->is_blocking_keyboard_events || this_->is_blocking_mouse_events))
        {
            // Block events on the canvas
            jobject source = AWTEvent(event).getSource(env);
            if (source)
            {
                jclass canvas_class = env->FindClass("java/awt/Canvas");
                if (canvas_class)
                {
                    if (env->IsInstanceOf(source, canvas_class))
                    {
                        // Check what kind of event it is..
                        jclass key_event_class = env->FindClass("java/awt/event/KeyEvent");
                        jclass mouse_event_class = env->FindClass("java/awt/event/MouseEvent");
                        jclass focus_event_class = env->FindClass("java/awt/event/FocusEvent");

                        if (key_event_class && mouse_event_class && focus_event_class)
                        {
                            // BLOCKED EVENT
                            if ((this_->is_blocking_keyboard_events && env->IsInstanceOf(event, key_event_class)) ||
                                (this_->is_blocking_mouse_events && env->IsInstanceOf(event, mouse_event_class)) ||
                                env->IsInstanceOf(event, focus_event_class))
                            {
                                env->DeleteLocalRef(focus_event_class);
                                env->DeleteLocalRef(mouse_event_class);
                                env->DeleteLocalRef(key_event_class);

                                env->DeleteLocalRef(canvas_class);
                                env->DeleteLocalRef(source);
                                env->DeleteLocalRef(cls);
                                return;
                            }
                        }

                        if (focus_event_class)
                        {
                            env->DeleteLocalRef(focus_event_class);
                        }

                        if (mouse_event_class)
                        {
                            env->DeleteLocalRef(mouse_event_class);
                        }

                        if (key_event_class)
                        {
                            env->DeleteLocalRef(key_event_class);
                        }
                    }
                    env->DeleteLocalRef(canvas_class);
                }
                env->DeleteLocalRef(source);
            }

            // Block events on the window/frame
            jclass window_class = env->FindClass("java/awt/event/WindowEvent");
            if (window_class)
            {
                if (env->IsInstanceOf(event, window_class))
                {
                    jclass event_class = env->GetObjectClass(event);
                    if (event_class)
                    {
                        jmethodID getIDMethodID = env->GetMethodID(event_class, "getID", "()I");
                        jint event_id = env->CallIntMethod(event, getIDMethodID);

                        if (event_id == WindowEvent::WindowEventCodes::WINDOW_ICONIFIED ||
                            event_id == WindowEvent::WindowEventCodes::WINDOW_DEICONIFIED ||
                            event_id == WindowEvent::WindowEventCodes::WINDOW_ACTIVATED ||
                            event_id == WindowEvent::WindowEventCodes::WINDOW_DEACTIVATED ||
                            event_id == WindowEvent::WindowEventCodes::WINDOW_GAINED_FOCUS ||
                            event_id == WindowEvent::WindowEventCodes::WINDOW_LOST_FOCUS ||
                            event_id == WindowEvent::WindowEventCodes::WINDOW_STATE_CHANGED)
                        {
                            env->DeleteLocalRef(event_class);
                            env->DeleteLocalRef(window_class);
                            env->DeleteLocalRef(cls);
                            return;
                        }
                        env->DeleteLocalRef(event_class);
                    }
                }
                env->DeleteLocalRef(window_class);
            }
        }

        // super.dispatchEvent(event)
        dispatch_event(env, cls, thiz, event);
        env->DeleteLocalRef(cls);
    }

}

RIEventQueue::RIEventQueue(JNIEnv* env) noexcept : EventQueue(env), is_blocking_keyboard_events(false), is_blocking_mouse_events(false)
{
    this->DefineClass();
}

bool RIEventQueue::is_keyboard_input_enabled() const noexcept
{
    return !is_blocking_keyboard_events;
}

void RIEventQueue::set_keyboard_input_enabled(bool enabled) noexcept
{
    is_blocking_keyboard_events = !enabled;
}

bool RIEventQueue::is_mouse_input_enabled() const noexcept
{
    return !is_blocking_mouse_events;
}

void RIEventQueue::set_mouse_input_enabled(bool enabled) noexcept
{
    is_blocking_mouse_events = !enabled;
}